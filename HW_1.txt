GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON.
https://github.com/Froska0/JSON

 5. Клонировать репозиторий JSON на локальный компьютер.
git clone git@github.com:Froska0/JSON.git

 6. Внутри локального JSON создать файл “new.json”.
cd JSON
touch new.json

 7. Добавить файл под гит.
git add new.json

 8. Закоммитить файл.
git commit -m "added new.json"

 9. Отправить файл на внешний GitHub репозиторий.
git push

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
cat > new.json
{
	"name": "Anna",
	"surname": "Krylova",
	"age": 38,	
	"pets": 1,
	"pets_name": "Chernysh",
	"salary": 1000,
}
Ctrl + C

 11. Отправить изменения на внешний репозиторий.
git commit -am "modify new.json"
git push

 12. Создать файл preferences.json
touch preferences.json

 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
cat > preferences.json
{
	"favorite_movie": "don't have",
	"favorite_series": "don't have",
	"favorite_food": "meat",	
	"favorite_season": "summer",
	"country_to_visit": "Japan"
}
Ctrl + C

 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
cat > sklls.json
{
	"skill_1": "Basic theory",
	"skill_2": "Client-server architecture",
	"skill_3": "API testing via Postman",	
	"skill_4": "Sniffing http web traffic",
	"skill_5": "Removing and reading logs from an external server",
	"skill_6": "VPN",
	"skill_7": "Mobile testing",
	"skill_8": "Feature iOS, Android, guidelines",
	"skill_9": "Building Android applications on Android Studio",
	"skill_10": "Android device management",
	"skill_11": "Command line (terminal) Linux",
	"skill_12": "Basic bash scripting",
	"skill_13": "Access to remote servers",
	"skill_14": "SQL basics",
	"skill_15": "Postgres database",
	"skill_16": "Non-relational database Redis",
	"skill_17": "Load testing in Jmeter",
	"skill_18": "Scrum development methodology",
	"skill_19": "Python basics"	
}
Ctrl + C

 15. Отправить сразу 2 файла на внешний репозиторий.
git add .
git commit -m "added 2 files preferences.json and sklls.json
git push

 16. На веб интерфейсе создать файл bug_report.json.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 20. Синхронизировать внешний и локальный репозиторий JSON
git pull


XML
 21. Создать внешний репозиторий c названием XML.
https://github.com/Froska0/XML

 22. Клонировать репозиторий XML на локальный компьютер.
git@github.com:Froska0/XML.git

 23. Внутри локального XML создать файл “new.xml”.
cd JSON
touch new.json

 24. Добавить файл под гит.
git add new.XML

 25. Закоммитить файл.
git commit -m "added new.XML"

 26. Отправить файл на внешний GitHub репозиторий.
git push

 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
cat > new.xml
<?xml version="1.0"?>
<about>
  <name>Anna</name>
  <surname>Krylova</surname>
  <age>38</age>
  <pets>1</pets>
  <pets_name>Chernysh</pets_name>
  <salary>1000</salary>
</about>

 28. Отправить изменения на внешний репозиторий.
git commit -am "modified new.xml"
git push

 29. Создать файл preferences.xml
touch preferences.xml

 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
cat > preferences.xml
<?xml version="1.0"?>
<about>
  <favorite_movie>dont_have</favorite_movie>
  <favorite_series>dont_have</favorite_series>
  <favorite_food>meat</favorite_food>
  <favorite_season>summer</favorite_season>
  <country_to_visit>Japan</country_to_visit>
</about>
Ctrl + C

 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
cat > sklls.xml
<?xml version="1.0"?>
<about>
  <skill_1>Basic theory</skill_1>
  <skill_2>Client-server architecture</skill_2>
  <skill_3>API testing via Postman</skill_3>
  <skill_4>Sniffing http web traffic</skill_4>
  <skill_5>Removing and reading logs from an external server</skill_5>
  <skill_6>VPN</skill_6>
  <skill_7>Mobile testing</skill_7>
  <skill_8>Feature iOS, Android, guidelines</skill_8>
  <skill_9>Building Android applications on Android Studio</skill_9>
  <skill_10>Android device management</skill_10>
  <skill_11>Command line (terminal) Linux</skill_11>
  <skill_12>Basic bash scripting</skill_12>
  <skill_13>Access to remote servers</skill_13>
  <skill_14>SQL basics</skill_14>
  <skill_15>Postgres database</skill_15>
  <skill_16>Non-relational database Redis</skill_16>
  <skill_17>Load testing in Jmeter</skill_17>
  <skill_18>Scrum development methodology</skill_18>
  <skill_19>Python basics</skill_19>
</about>
Ctrl + C

 32. Сделать коммит в одну строку.
git add . && git commit -m "added 2 files preferences.json and sklls.json

 33. Отправить сразу 2 файла на внешний репозиторий.
git push

 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 38. Синхронизировать внешний и локальный репозиторий XML
git pull


TXT
 1. Создать внешний репозиторий c названием TXT.
https://github.com/Froska0/TXT

 2. Клонировать репозиторий TXT на локальный компьютер.
git clone git@github.com:Froska0/TXT.git

 3. Внутри локального TXT создать файл “new.txt”.
touch new.txt

 4. Добавить файл под гит.
git add new.txt

 5. Закоммитить файл.
git commit -m "added new.txt"

 6. Отправить файл на внешний GitHub репозиторий.
git push

 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
cat > new.txt
name: Anna,
surname: Krylova,
age: 38,	
pets: 1,
pets_name: "Chernysh,
salary: 1000
Ctrl + C

 8. Отправить изменения на внешний репозиторий.
git add new.txt && git commit -m "modified new.txt" && git push

 9. Создать файл preferences.txt
touch preferences.txt

 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
cat > preferences.txt
About me:
	favorite movie: don't have,
	favorite series: don't have,
	favorite food: meat,	
	favorite season: summer,
	country to visit: Japan

 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
cat > sklls.txt
Skills:
	1. Basic theory,
	2. Client-server architecture,
	3. API testing via Postman,	
	4. Sniffing http web traffic,
	5. Removing and reading logs from an external server,
	6. VPN,
	7. Mobile testing,
	8. Feature iOS, Android, guidelines,
	9. Building Android applications on Android Studio,
	10. Android device management,
	11. Command line (terminal) Linux,
	12. Basic bash scripting,
	13. Access to remote servers,
	14. SQL basics,
	15. Postgres database,
	16. Non-relational database Redis,
	17. Load testing in Jmeter,
	18. Scrum development methodology,
	19. Python basics
Ctrl + C

 12. Сделать коммит в одну строку.
 git add . && git commit -m "added 2 files: preferences.txt and skills.txt"

 13. Отправить сразу 2 файла на внешний репозиторий.
git push

 14. На веб интерфейсе создать файл bug_report.txt.
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. Синхронизировать внешний и локальный репозиторий TXT
git pull